# source: http://localhost:4000/graphql
# timestamp: Fri Jul 13 2018 01:07:25 GMT+0300 (Eastern European Summer Time)

"""Autogenerated return type of AddComment"""
type AddCommentPayload {
  comment: Comment
  errors: [UserError!]!
}

type Article {
  author: Profile!
  body: String!
  comments: [Comment!]!
  createdAt: DateTime!
  description: String!
  favorited: Boolean!
  favoritesCount: Int!
  id: ID!
  slug: String!
  tagList: [String!]!
  title: String!
  updatedAt: DateTime!
}

"""The connection type for Article."""
type ArticleConnection {
  """A list of edges."""
  edges: [ArticleEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ArticleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Article
}

type Comment {
  author: User!
  body: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

"""Autogenerated return type of CreateArticle"""
type CreateArticlePayload {
  article: Article
  errors: [UserError!]!
}

"""Autogenerated return type of CreateUser"""
type CreateUserPayload {
  errors: [UserError!]!
  user: User
}

scalar DateTime

"""Autogenerated return type of DeleteArticle"""
type DeleteArticlePayload {
  article: Article!
}

"""Autogenerated return type of DeleteComment"""
type DeleteCommentPayload {
  comment: Comment
}

"""Autogenerated return type of FavoriteArticle"""
type FavoriteArticlePayload {
  article: Article
}

"""Autogenerated return type of FollowUser"""
type FollowUserPayload {
  user: Profile
}

type Mutation {
  addComment(articleId: ID!, body: String!): AddCommentPayload
  createArticle(title: String!, description: String!, body: String!, tagList: [String!]!): CreateArticlePayload
  createUser(username: String!, email: String!, password: String!): CreateUserPayload
  deleteArticle(id: ID!): DeleteArticlePayload
  deleteComment(id: ID!): DeleteCommentPayload
  favoriteArticle(id: ID!): FavoriteArticlePayload
  followUser(id: ID!): FollowUserPayload
  signinUser(email: String!, password: String!): SignInUserPayload
  unfavoriteArticle(id: ID!): UnfavoriteArticlePayload
  unfollowUser(id: ID!): UnfollowUserPayload
  updateArticle(id: ID!, title: String!, description: String!, body: String!, tagList: [String!]!): UpdateArticlePayload
  updateUser(email: String!, username: String!, bio: String, image: String, password: String): UpdateUserPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Profile {
  bio: String
  email: String!
  followersCount: Int!
  following: Boolean!
  id: ID!
  image: String
  username: String!
}

type Query {
  article(slug: String!): Article
  articles(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    tag: String
    authoredBy: String
    favoritedBy: String
  ): ArticleConnection!
  currentUser: User
  feed(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ArticleConnection!
  profile(username: String!): Profile
  tags: [String!]!
}

"""Autogenerated return type of SignInUser"""
type SignInUserPayload {
  errors: [UserError!]!
  token: String
  user: User
}

"""Autogenerated return type of UnfavoriteArticle"""
type UnfavoriteArticlePayload {
  article: Article
}

"""Autogenerated return type of UnfollowUser"""
type UnfollowUserPayload {
  user: Profile
}

"""Autogenerated return type of UpdateArticle"""
type UpdateArticlePayload {
  article: Article
  errors: [UserError!]!
}

"""Autogenerated return type of UpdateUser"""
type UpdateUserPayload {
  errors: [UserError!]!
  user: User
}

type User {
  bio: String
  email: String!
  id: ID!
  image: String
  username: String!
}

type UserError {
  message: String!
  path: [String!]
}
